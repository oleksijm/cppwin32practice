#include <windows.h>
#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <fstream>
#include <sstream>
#include <memory>
#include "StudentRec.h"
#include "StudentWindowCollection.h"
	
//last update - 08.02.2023 adding class type for window handles to put into window collections vector, in order to manipulate them during scrolling. 
//It's beginning to look better. Need to pack window handles into a vector and loop through the vector to move them all. Done.
//Now I need to implement horizontal scrolling across the output windows as well.




//lresult callback prototype
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);



//window handles
HWND hMainWindow;
HINSTANCE hMainInstance;

HWND hLblOutput;
HWND hTxtInput;
HWND hButton;

CHAR s_text_1[]{ "Some text.." };
int posX = 0;


#define IDC_TEXTBOX 1000
#define IDC_BUTTON 1001




//call to winmain - equivalent of main for win32 environments
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{


	MSG msg = { 0 };
	WNDCLASS wc = { 0 };
	wc.lpfnWndProc = WndProc;
	wc.hInstance = hInstance;
	wc.hbrBackground = (HBRUSH)(COLOR_BACKGROUND);
	wc.lpszClassName = TEXT("NiceWindowsApp");
	if (!RegisterClass(&wc))
		return 1;

	//added ws_hscroll and ws_vscroll, but they are not working without additional control message flows
	hMainWindow = CreateWindow(wc.lpszClassName, TEXT("My Windows Application"), WS_OVERLAPPEDWINDOW | WS_HSCROLL | WS_VSCROLL | WS_VISIBLE,
		0, 0, 640, 480, 0, 0, hInstance, NULL);



	hMainInstance = wc.hInstance;

	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return 0;
}
//callback definition
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int offset = 0;
	std::wstring input;
	switch (message) {

	case WM_CREATE:
	{
		hMainWindow = hWnd;
		hTxtInput = CreateWindowEx(WS_EX_CLIENTEDGE, TEXT("EDIT"), s_text_1,
			WS_VISIBLE | WS_CHILD | ES_LEFT, 50, 50, 400, 25, hWnd,
			(HMENU)IDC_TEXTBOX, hMainInstance, NULL);
		hButton = CreateWindowEx(WS_EX_CLIENTEDGE, TEXT("BUTTON"), TEXT("Press Me!"), WS_VISIBLE | WS_CHILD | WM_COPY | ES_LEFT, 500, 30, 100, 60, hWnd,
			(HMENU)IDC_BUTTON, hMainInstance, NULL);

		//horizontal scrolling set up
		SCROLLINFO si;
		si.cbSize = sizeof(si);
		si.nPos = 0;
		si.nMax = 800;
		si.nPage = 400;
		si.fMask = SIF_ALL;
		si.nMin = 0;
		SetScrollInfo(hWnd, SB_HORZ, &si, TRUE);

		break;
	}
	//not working properly - 06.02.2023. it's working, but I'm still learning the details.
	case WM_HSCROLL: {
		SCROLLINFO si;
		si.cbSize = sizeof(si);
		GetScrollInfo(hWnd, SB_HORZ, &si);
		switch (LOWORD(wParam)) {
		case SB_LINELEFT: {
			si.nPos -= 5;
		}break;
		case SB_LINERIGHT: {
			si.nPos += 5;
		}break;
		case SB_THUMBTRACK: {
			si.nPos = HIWORD(wParam);
		}break;
		};
		SetScrollInfo(hWnd, SB_HORZ, &si, TRUE);
		posX = -si.nPos;
		MoveWindow( // 50, 50, 400, 25 - original
			hTxtInput,
			posX+50,
			50,
			400,
			25,
			TRUE
		);
		MoveWindow( // 500, 30, 100, 60 - original 
			hButton,
			posX+500,
			30,
			100,
			60,
			TRUE
		);


	}break;


		//press button
		case WM_COMMAND:
		{
			if (LOWORD(wParam) == IDC_BUTTON)
			{
				input.resize(GetWindowTextLengthW(hTxtInput));
				GetWindowTextW(hTxtInput, input.data(), input.size() + 1);



				/*hLblOutput = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), s_text_1, WS_VISIBLE | WS_CHILD | ES_READONLY |
												ES_LEFT, 50, 200 + offset * 26, 800, 25, hWnd,
												(HMENU)IDC_TEXTBOX, hMainInstance, NULL);
				SetWindowTextW(hLblOutput, input.data());*/


				std::ifstream inputFile;
				inputFile.open(input.data());

				std::string line = "";
				std::vector<StudentRec> students;
				std::vector<StudentWindowCollection> windows;
				while (std::getline(inputFile, line))
				{

					std::stringstream inputString(line);

					std::string studentId;
					std::string lastName;
					std::string firstName;
					int age;
					std::string phone;
					double gpa;
					std::string tempString;



					getline(inputString, studentId, ',');
					getline(inputString, lastName, ',');
					getline(inputString, firstName, ',');
					//getting the age
					getline(inputString, tempString, ',');
					age = atoi(tempString.c_str());
					getline(inputString, phone, ',');
					//getting the GPA
					tempString = "";
					getline(inputString, tempString);
					gpa = atof(tempString.c_str());

					StudentRec student(studentId, firstName, lastName, age, phone, gpa);
					students.push_back(student);
					line = "";
				}

				//loop through students array and output info into windows

				for (auto student : students)
				{
					
					std::string* StdIdP = &student.Id;
					std::string* StdFirstNameP = &student.FirstName;
					std::string* StdLastNameP = &student.LastName;
					int* StdAgeP = &student.Age;
					std::string* StdPhoneP = &student.PhoneNumber;
					double* StdGpaP = &student.Gpa;
					std::string StdId = *StdIdP;
					std::string StdFirstName = *StdFirstNameP;
					std::string StdLastName = *StdLastNameP;
					int StdAge = *StdAgeP;
					std::string StdAgeString = std::to_string(StdAge);
					std::string StdPhone = *StdPhoneP;
					double StdGpa = *StdGpaP;
					std::string StdGpaString = std::to_string(StdGpa);

					std::unique_ptr<StudentWindowCollection> SWC1(new StudentWindowCollection());



					SWC1->IdWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdId.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 50, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->FirstNameWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdFirstName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 150, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->LastNameWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdLastName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 320, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->AgeWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdAgeString.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 430, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->PhoneNumberWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdPhone.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 540, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->GpaWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdGpaString.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 650, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					windows.push_back(*SWC1);
				




					/*hLblOutput = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdFirstName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 50, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);
					hLblOutput = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdLastName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 250, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);*/

					++offset;

				}



			}
			break; 
		}
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return 0;
}








*******************************************************************************************************************************************************************************************
StudentRec.h 
********************************************************************************************************************************************************************************************

#ifndef STUDENTREC_H
#define STUDENTREC_H
#include <string>

class StudentRec
{
	public:
		StudentRec(std::string id, std::string firstName, std::string lastName, int age, std::string phoneNumber, double gpa);
	

	std::string Id;
	std::string FirstName;
	std::string LastName;
	std::string PhoneNumber;
	int Age;
	double Gpa;


};
#endif

********************************************************************************************************************************************************************************************
StudentRec.cpp
********************************************************************************************************************************************************************************************

#include "StudentRec.h"

StudentRec::StudentRec(std::string id, std::string firstName, std::string lastName, int age, std::string phoneNumber, double gpa)
	{
		Id = id;
		FirstName = firstName;
		LastName = lastName;
		PhoneNumber = phoneNumber;
		Age = age;
		Gpa = gpa;

	}
	
	
**********************************************************************************************************************************************************************************************
StudentWindowCollection.h
***********************************************************************************************************************************************************************************************

#ifndef STUDENTWINDOWCOLLECTION_H
#define STUDENTWINDOWCOLLECTION_H
#include <windows.h>


class StudentWindowCollection
{
public:
	StudentWindowCollection(HWND idWindow, HWND firstNameWindow, HWND lastNameWindow, HWND ageWindow, HWND phoneNumberWindow, HWND gpaWindow);
	StudentWindowCollection();


	HWND IdWindow;
	HWND FirstNameWindow;
	HWND LastNameWindow;
	HWND PhoneNumberWindow;
	HWND AgeWindow;
	HWND GpaWindow;


};
#endif

************************************************************************************************************************************************************************************************
StudentWindowCollection.cpp
************************************************************************************************************************************************************************************************

#include "StudentWindowCollection.h"


StudentWindowCollection::StudentWindowCollection(HWND idWindow, HWND firstNameWindow, HWND lastNameWindow, HWND ageWindow, HWND phoneNumberWindow, HWND gpaWindow)
{
	IdWindow = idWindow;
	FirstNameWindow = firstNameWindow;
	LastNameWindow = lastNameWindow;
	PhoneNumberWindow = phoneNumberWindow;
	AgeWindow = ageWindow;
	GpaWindow = gpaWindow;

}
StudentWindowCollection::StudentWindowCollection() {}

