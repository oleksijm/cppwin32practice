#include <windows.h>
#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <fstream>
#include <sstream>
#include <memory>
#include "StudentRec.h"
#include "StudentWindowCollection.h"
	
//last update - 11.02.2023 expanding window collection class in order to accommodate for additiona info needed to handle scrolling smoothly - cannot get the output windows to move through loop
//It's beginning to look better. Need to pack window handles into a vector and loop through the vector to move them all. Done.
//Now I need to implement horizontal scrolling across the output windows as well.




//lresult callback prototype
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);



//window handles
HWND hMainWindow;
HINSTANCE hMainInstance;

HWND hLblOutput;
HWND hTxtInput;
HWND hButton;

CHAR s_text_1[]{ "Some text.." };
int posX = 0;


#define IDC_TEXTBOX 1000
#define IDC_BUTTON 1001




//call to winmain - equivalent of main for win32 environments
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{


	MSG msg = { 0 };
	WNDCLASS wc = { 0 };
	wc.lpfnWndProc = WndProc;
	wc.hInstance = hInstance;
	wc.hbrBackground = (HBRUSH)(COLOR_BACKGROUND);
	wc.lpszClassName = TEXT("NiceWindowsApp");
	if (!RegisterClass(&wc))
		return 1;

	//added ws_hscroll and ws_vscroll, but they are not working without additional control message flows
	hMainWindow = CreateWindow(wc.lpszClassName, TEXT("My Windows Application"), WS_OVERLAPPEDWINDOW | WS_HSCROLL | WS_VSCROLL | WS_VISIBLE,
		0, 0, 640, 480, 0, 0, hInstance, NULL);



	hMainInstance = wc.hInstance;

	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return 0;
}
//callback definition
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int offset = 0;
	std::wstring input;
	std::vector<StudentWindowCollection*> windows;
	switch (message) {

	case WM_CREATE:
	{
		hMainWindow = hWnd;
		hTxtInput = CreateWindowEx(WS_EX_CLIENTEDGE, TEXT("EDIT"), s_text_1,
			WS_VISIBLE | WS_CHILD | ES_LEFT, 50, 50, 400, 25, hWnd,
			(HMENU)IDC_TEXTBOX, hMainInstance, NULL);
		hButton = CreateWindowEx(WS_EX_CLIENTEDGE, TEXT("BUTTON"), TEXT("Press Me!"), WS_VISIBLE | WS_CHILD | WM_COPY | ES_LEFT, 500, 30, 100, 60, hWnd,
			(HMENU)IDC_BUTTON, hMainInstance, NULL);

		//horizontal scrolling set up
		SCROLLINFO si;
		si.cbSize = sizeof(si);
		si.nPos = 0;
		si.nMax = 800;
		si.nPage = 400;
		si.fMask = SIF_ALL;
		si.nMin = 0;
		SetScrollInfo(hWnd, SB_HORZ, &si, TRUE);

		break;
	}
	//not working properly - 06.02.2023. it's working, but I'm still learning the details.
	case WM_HSCROLL: {
		SCROLLINFO si;
		si.cbSize = sizeof(si);
		GetScrollInfo(hWnd, SB_HORZ, &si);
		switch (LOWORD(wParam)) {
		case SB_LINELEFT: {
			si.nPos -= 5;
		}break;
		case SB_LINERIGHT: {
			si.nPos += 5;
		}break;
		case SB_THUMBTRACK: {
			si.nPos = HIWORD(wParam);
		}break;
		};
		SetScrollInfo(hWnd, SB_HORZ, &si, TRUE);
		posX = -si.nPos;
		MoveWindow( // 50, 50, 400, 25 - original
			hTxtInput,
			posX+50,
			50,
			400,
			25,
			TRUE
		);
		MoveWindow( // 500, 30, 100, 60 - original 
			hButton,
			posX+500,
			30,
			100,
			60,
			TRUE
		);

		

		for (auto window1 : windows)
		 {
			MoveWindow(window1->IdWindow, posX + window1->IdWindowXCoord, window1->IdWindowYCoord, window1->IdWindowWidth, window1->IdWindowHeight, TRUE);
			MoveWindow(window1->FirstNameWindow, posX + window1->FirstNameWindowXCoord, window1->FirstNameWindowYCoord, window1->FirstNameWindowWidth, window1->FirstNameWindowHeight, TRUE);
			MoveWindow(window1->LastNameWindow, posX + window1->LastNameWindowXCoord, window1->LastNameWindowYCoord, window1->LastNameWindowWidth, window1->LastNameWindowHeight, TRUE);
			MoveWindow(window1->PhoneNumberWindow, posX + window1->PhoneNumberWindowXCoord, window1->PhoneNumberWindowYCoord, window1->PhoneNumberWindowWidth, window1->PhoneNumberWindowHeight, TRUE);
			MoveWindow(window1->AgeWindow, posX + window1->AgeWindowXCoord, window1->AgeWindowYCoord, window1->AgeWindowWidth, window1->AgeWindowHeight, TRUE);
			MoveWindow(window1->GpaWindow, posX + window1->GpaWindowXCoord, window1->GpaWindowYCoord, window1->GpaWindowWidth, window1->GpaWindowHeight, TRUE);
			
		}


	}break;


		//press button
		case WM_COMMAND:
		{
			if (LOWORD(wParam) == IDC_BUTTON)
			{
				input.resize(GetWindowTextLengthW(hTxtInput));
				GetWindowTextW(hTxtInput, input.data(), input.size() + 1);



				/*hLblOutput = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), s_text_1, WS_VISIBLE | WS_CHILD | ES_READONLY |
												ES_LEFT, 50, 200 + offset * 26, 800, 25, hWnd,
												(HMENU)IDC_TEXTBOX, hMainInstance, NULL);
				SetWindowTextW(hLblOutput, input.data());*/


				std::ifstream inputFile;
				inputFile.open(input.data());

				std::string line = "";
				std::vector<StudentRec> students;
				//std::vector<StudentWindowCollection> windows;
				while (std::getline(inputFile, line))
				{

					std::stringstream inputString(line);

					std::string studentId;
					std::string lastName;
					std::string firstName;
					int age;
					std::string phone;
					double gpa;
					std::string tempString;



					getline(inputString, studentId, ',');
					getline(inputString, lastName, ',');
					getline(inputString, firstName, ',');
					//getting the age
					getline(inputString, tempString, ',');
					age = atoi(tempString.c_str());
					getline(inputString, phone, ',');
					//getting the GPA
					tempString = "";
					getline(inputString, tempString);
					gpa = atof(tempString.c_str());

					StudentRec student(studentId, firstName, lastName, age, phone, gpa);
					students.push_back(student);
					line = "";
				}

				//loop through students array and output info into windows

				for (auto student : students)
				{
					
					std::string* StdIdP = &student.Id;
					std::string* StdFirstNameP = &student.FirstName;
					std::string* StdLastNameP = &student.LastName;
					int* StdAgeP = &student.Age;
					std::string* StdPhoneP = &student.PhoneNumber;
					double* StdGpaP = &student.Gpa;
					std::string StdId = *StdIdP;
					std::string StdFirstName = *StdFirstNameP;
					std::string StdLastName = *StdLastNameP;
					int StdAge = *StdAgeP;
					std::string StdAgeString = std::to_string(StdAge);
					std::string StdPhone = *StdPhoneP;
					double StdGpa = *StdGpaP;
					std::string StdGpaString = std::to_string(StdGpa);

					//std::unique_ptr<StudentWindowCollection> SWC1(new StudentWindowCollection(50, 150, 320, 430, 540, 650));



					/*std::unique_ptr<StudentWindowCollection> SWC1(new StudentWindowCollection(	50, 200, 26, 100,
																								150, 200, 26, 100,
																								320, 200, 26, 100,
																								430, 200, 26, 100,
																								540, 200, 26, 100,
																								650, 200, 26, 100 ));*/

					StudentWindowCollection* SWC1 = new StudentWindowCollection(50, 200, 26, 100,
						150, 200, 26, 100,
						320, 200, 26, 100,
						430, 200, 26, 100,
						540, 200, 26, 100,
						650, 200, 26, 100);



					SWC1->IdWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdId.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, SWC1->IdWindowXCoord, SWC1->IdWindowYCoord + offset * 26, SWC1->IdWindowWidth, SWC1->IdWindowHeight, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->FirstNameWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdFirstName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, SWC1->FirstNameWindowXCoord, SWC1->FirstNameWindowYCoord + offset * 26, SWC1->FirstNameWindowWidth, SWC1->FirstNameWindowHeight, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->LastNameWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdLastName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, SWC1->LastNameWindowXCoord, SWC1->LastNameWindowYCoord + offset * 26, SWC1->LastNameWindowWidth, SWC1->LastNameWindowHeight, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->AgeWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdAgeString.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, SWC1->AgeWindowXCoord, SWC1->AgeWindowYCoord + offset * 26, SWC1->AgeWindowWidth, SWC1->AgeWindowHeight, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->PhoneNumberWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdPhone.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, SWC1->PhoneNumberWindowXCoord, SWC1->PhoneNumberWindowYCoord + offset * 26, SWC1->PhoneNumberWindowWidth, SWC1->PhoneNumberWindowHeight, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					SWC1->GpaWindow = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdGpaString.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, SWC1->GpaWindowXCoord, SWC1->GpaWindowYCoord + offset * 26, SWC1->GpaWindowWidth, SWC1->GpaWindowHeight, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);

					windows.push_back(SWC1);
				




					/*hLblOutput = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdFirstName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 50, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);
					hLblOutput = CreateWindowEx(WS_EX_STATICEDGE, TEXT("EDIT"), StdLastName.c_str(), WS_VISIBLE | WS_CHILD | ES_READONLY |
						ES_LEFT, 250, 200 + offset * 26, 100, 25, hWnd,
						(HMENU)IDC_TEXTBOX, hMainInstance, NULL);*/

					++offset;

				}



			}
			break; 
		}
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return 0;
}










*******************************************************************************************************************************************************************************************
StudentRec.h 
********************************************************************************************************************************************************************************************

#ifndef STUDENTREC_H
#define STUDENTREC_H
#include <string>

class StudentRec
{
	public:
		StudentRec(std::string id, std::string firstName, std::string lastName, int age, std::string phoneNumber, double gpa);
	

	std::string Id;
	std::string FirstName;
	std::string LastName;
	std::string PhoneNumber;
	int Age;
	double Gpa;


};
#endif

********************************************************************************************************************************************************************************************
StudentRec.cpp
********************************************************************************************************************************************************************************************

#include "StudentRec.h"

StudentRec::StudentRec(std::string id, std::string firstName, std::string lastName, int age, std::string phoneNumber, double gpa)
	{
		Id = id;
		FirstName = firstName;
		LastName = lastName;
		PhoneNumber = phoneNumber;
		Age = age;
		Gpa = gpa;

	}
	
	
**********************************************************************************************************************************************************************************************
StudentWindowCollection.h
***********************************************************************************************************************************************************************************************

#ifndef STUDENTWINDOWCOLLECTION_H
#define STUDENTWINDOWCOLLECTION_H
#include <windows.h>


class StudentWindowCollection
{
public:

	StudentWindowCollection(HWND IdWindow,
		int IdWindowXCoord,
		int IdWindowYCoord,
		int IdWindowHeight,
		int IdWindowWidth,
		HWND FirstNameWindow,
		int FirstNameWindowXCoord,
		int FirstNameWindowYCoord,
		int FirstNameWindowHeight,
		int FirstNameWindowWidth,
		HWND LastNameWindow,
		int LastNameWindowXCoord,
		int LastNameWindowYCoord,
		int LastNameWindowHeight,
		int LastNameWindowWidth,
		HWND PhoneNumberWindow,
		int PhoneNumberWindowXCoord,
		int PhoneNumberWindowYCoord,
		int PhoneNumberWindowHeight,
		int PhoneNumberWindowWidth,
		HWND AgeWindow,
		int AgeWindowXCoord,
		int AgeWindowYCoord,
		int AgeWindowHeight,
		int AgeWindowWidth,
		HWND GpaWindow,
		int GpaWindowXCoord,
		int GpaWindowYCoord,
		int GpaWindowHeight,
		int GpaWindowWidth
		);

	StudentWindowCollection(
		int IdWindowXCoord,
		int IdWindowYCoord,
		int IdWindowHeight,
		int IdWindowWidth,
		int FirstNameWindowXCoord,
		int FirstNameWindowYCoord,
		int FirstNameWindowHeight,
		int FirstNameWindowWidth,
		int LastNameWindowXCoord,
		int LastNameWindowYCoord,
		int LastNameWindowHeight,
		int LastNameWindowWidth,
		int PhoneNumberWindowXCoord,
		int PhoneNumberWindowYCoord,
		int PhoneNumberWindowHeight,
		int PhoneNumberWindowWidth,
		int AgeWindowXCoord,
		int AgeWindowYCoord,
		int AgeWindowHeight,
		int AgeWindowWidth,
		int GpaWindowXCoord,
		int GpaWindowYCoord,
		int GpaWindowHeight,
		int GpaWindowWidth
		);






	StudentWindowCollection(HWND idWindow, int idWindowXCoord, HWND firstNameWindow, int firstNameWindowXCoord,
							HWND lastNameWindow, int lastNameWindowXCoord, HWND ageWindow, int ageWindowXCoord, HWND phoneNumberWindow, int phoneNumberWindowXCoord,
							HWND gpaWindow, int gpaWindowXCoord);

	StudentWindowCollection(HWND idWindow, HWND firstNameWindow, HWND lastNameWindow, HWND ageWindow, HWND phoneNumberWindow, HWND gpaWindow);

	StudentWindowCollection(int idWindowXCoord, int firstNameWindowxCoord, int lastNameWindowXCoord, int ageWindowXCoord, int phoneNumberWindowXCoord, int gpaWindowXCoord);

	StudentWindowCollection();


	HWND IdWindow;
	int IdWindowXCoord;
	int IdWindowYCoord;
	int IdWindowHeight;
	int IdWindowWidth;
	HWND FirstNameWindow;
	int FirstNameWindowXCoord;
	int FirstNameWindowYCoord;
	int FirstNameWindowHeight;
	int FirstNameWindowWidth;
	HWND LastNameWindow;
	int LastNameWindowXCoord;
	int LastNameWindowYCoord;
	int LastNameWindowHeight;
	int LastNameWindowWidth;
	HWND PhoneNumberWindow;
	int PhoneNumberWindowXCoord;
	int PhoneNumberWindowYCoord;
	int PhoneNumberWindowHeight;
	int PhoneNumberWindowWidth;
	HWND AgeWindow;
	int AgeWindowXCoord;
	int AgeWindowYCoord;
	int AgeWindowHeight;
	int AgeWindowWidth;
	HWND GpaWindow;
	int GpaWindowXCoord;
	int GpaWindowYCoord;
	int GpaWindowHeight;
	int GpaWindowWidth;

};
#endif





************************************************************************************************************************************************************************************************
StudentWindowCollection.cpp
************************************************************************************************************************************************************************************************

#include "StudentWindowCollection.h"


StudentWindowCollection::StudentWindowCollection(HWND idWindow,
	int idWindowXCoord,
	int idWindowYCoord,
	int idWindowHeight,
	int idWindowWidth,
	HWND firstNameWindow,
	int firstNameWindowXCoord,
	int firstNameWindowYCoord,
	int firstNameWindowHeight,
	int firstNameWindowWidth,
	HWND lastNameWindow,
	int lastNameWindowXCoord,
	int lastNameWindowYCoord,
	int lastNameWindowHeight,
	int lastNameWindowWidth,
	HWND phoneNumberWindow,
	int phoneNumberWindowXCoord,
	int phoneNumberWindowYCoord,
	int phoneNumberWindowHeight,
	int phoneNumberWindowWidth,
	HWND ageWindow,
	int ageWindowXCoord,
	int ageWindowYCoord,
	int ageWindowHeight,
	int ageWindowWidth,
	HWND gpaWindow,
	int gpaWindowXCoord,
	int gpaWindowYCoord,
	int gpaWindowHeight,
	int gpaWindowWidth
	)
{
	IdWindow = idWindow;
	FirstNameWindow = firstNameWindow;
	FirstNameWindowXCoord = firstNameWindowXCoord;
	LastNameWindow = lastNameWindow;
	LastNameWindowXCoord = lastNameWindowXCoord;
	AgeWindow = ageWindow;
	AgeWindowXCoord = ageWindowXCoord;
	PhoneNumberWindow = phoneNumberWindow;
	PhoneNumberWindowXCoord = phoneNumberWindowXCoord;
	GpaWindow = gpaWindow;
	GpaWindowXCoord = gpaWindowXCoord;

	IdWindowXCoord = idWindowXCoord;
	FirstNameWindowXCoord = firstNameWindowXCoord;
	LastNameWindowXCoord = lastNameWindowXCoord;
	AgeWindowXCoord = ageWindowXCoord;
	PhoneNumberWindowXCoord = phoneNumberWindowXCoord;
	GpaWindowXCoord = gpaWindowXCoord;

	IdWindowYCoord = idWindowYCoord;
	FirstNameWindowYCoord = firstNameWindowYCoord;
	LastNameWindowYCoord = lastNameWindowYCoord;
	AgeWindowYCoord = ageWindowYCoord;
	PhoneNumberWindowYCoord = phoneNumberWindowYCoord;
	GpaWindowYCoord = gpaWindowYCoord;

	IdWindowHeight = idWindowHeight;
	FirstNameWindowHeight = firstNameWindowHeight;
	LastNameWindowHeight = lastNameWindowHeight;
	AgeWindowHeight = ageWindowHeight;
	PhoneNumberWindowHeight = phoneNumberWindowHeight;
	GpaWindowHeight = gpaWindowHeight;

	IdWindowWidth = idWindowWidth;
	FirstNameWindowWidth = firstNameWindowWidth;
	LastNameWindowWidth = lastNameWindowWidth;
	AgeWindowWidth = ageWindowWidth;
	PhoneNumberWindowWidth = phoneNumberWindowWidth;
	GpaWindowWidth = gpaWindowWidth;


}

	StudentWindowCollection::StudentWindowCollection(
		int idWindowXCoord,
		int idWindowYCoord,
		int idWindowHeight,
		int idWindowWidth,
		int firstNameWindowXCoord,
		int firstNameWindowYCoord,
		int firstNameWindowHeight,
		int firstNameWindowWidth,
		int lastNameWindowXCoord,
		int lastNameWindowYCoord,
		int lastNameWindowHeight,
		int lastNameWindowWidth,
		int phoneNumberWindowXCoord,
		int phoneNumberWindowYCoord,
		int phoneNumberWindowHeight,
		int phoneNumberWindowWidth,
		int ageWindowXCoord,
		int ageWindowYCoord,
		int ageWindowHeight,
		int ageWindowWidth,
		int gpaWindowXCoord,
		int gpaWindowYCoord,
		int gpaWindowHeight,
		int gpaWindowWidth
		)
	{
		IdWindowXCoord = idWindowXCoord;
		FirstNameWindowXCoord = firstNameWindowXCoord;
		LastNameWindowXCoord = lastNameWindowXCoord;
		AgeWindowXCoord = ageWindowXCoord;
		PhoneNumberWindowXCoord = phoneNumberWindowXCoord;
		GpaWindowXCoord = gpaWindowXCoord;

		IdWindowYCoord = idWindowYCoord;
		FirstNameWindowYCoord = firstNameWindowYCoord;
		LastNameWindowYCoord = lastNameWindowYCoord;
		AgeWindowYCoord = ageWindowYCoord;
		PhoneNumberWindowYCoord = phoneNumberWindowYCoord;
		GpaWindowYCoord = gpaWindowYCoord;

		IdWindowHeight = idWindowHeight;
		FirstNameWindowHeight = firstNameWindowHeight;
		LastNameWindowHeight = lastNameWindowHeight;
		AgeWindowHeight = ageWindowHeight;
		PhoneNumberWindowHeight = phoneNumberWindowHeight;
		GpaWindowHeight = gpaWindowHeight;

		IdWindowWidth = idWindowWidth;
		FirstNameWindowWidth = firstNameWindowWidth;
		LastNameWindowWidth = lastNameWindowWidth;
		AgeWindowWidth = ageWindowWidth;
		PhoneNumberWindowWidth = phoneNumberWindowWidth;
		GpaWindowWidth = gpaWindowWidth;
}









StudentWindowCollection::StudentWindowCollection(HWND idWindow, int idWindowXCoord, HWND firstNameWindow, int firstNameWindowXCoord,
	HWND lastNameWindow, int lastNameWindowXCoord, HWND ageWindow, int ageWindowXCoord, HWND phoneNumberWindow, int phoneNumberWindowXCoord,
	HWND gpaWindow, int gpaWindowXCoord)
{

	IdWindow = idWindow;
	IdWindowXCoord = idWindowXCoord;
	FirstNameWindow = firstNameWindow;
	FirstNameWindowXCoord = firstNameWindowXCoord;
	LastNameWindow = lastNameWindow;
	LastNameWindowXCoord = lastNameWindowXCoord;
	AgeWindow = ageWindow;
	AgeWindowXCoord = ageWindowXCoord;
	PhoneNumberWindow = phoneNumberWindow;
	PhoneNumberWindowXCoord = phoneNumberWindowXCoord;
	GpaWindow = gpaWindow;
	GpaWindowXCoord = gpaWindowXCoord;
	
}




StudentWindowCollection::StudentWindowCollection(HWND idWindow, HWND firstNameWindow, HWND lastNameWindow, HWND ageWindow, HWND phoneNumberWindow, HWND gpaWindow)
{
	IdWindow = idWindow;
	FirstNameWindow = firstNameWindow;
	LastNameWindow = lastNameWindow;
	PhoneNumberWindow = phoneNumberWindow;
	AgeWindow = ageWindow;
	GpaWindow = gpaWindow;

}

StudentWindowCollection::StudentWindowCollection(int idWindowXCoord, int firstNameWindowXCoord, int lastNameWindowXCoord, int ageWindowXCoord, int phoneNumberWindowXCoord, int gpaWindowXCoord)
{
	IdWindowXCoord = idWindowXCoord;
	FirstNameWindowXCoord = firstNameWindowXCoord;
	LastNameWindowXCoord = lastNameWindowXCoord;
	AgeWindowXCoord = ageWindowXCoord;
	PhoneNumberWindowXCoord = phoneNumberWindowXCoord;
	GpaWindowXCoord = gpaWindowXCoord;

}

StudentWindowCollection::StudentWindowCollection() {}




